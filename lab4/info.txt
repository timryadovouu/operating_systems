планировщики 

c -- просмоттр планировщика
echo none > /sys/block/nvme0n1/queue/scheduler
[none] mq-deadline kyber bfq 
hdparm -tT /dev/nvme0n1

DISC="nvme0n1"; \
 cat /sys/block/$DISC/queue/scheduler; \
 for T in noop deadline kyber bfq; do \
     echo $T > /sys/block/$DISC/queue/scheduler; \
     cat /sys/block/$DISC/queue/scheduler; \
     sync && /sbin/hdparm -tT /dev/$DISC && echo "----"; \
     sleep 15; \
 done

https://www.kernel.org/doc/Documentation/block/bfq-iosched.txt
echo x > /sys/block/nvme0n1/queue/iosched/timeout_sync  ---- echo x > /sys/block/nvmeon1/queue/iosched/timeout_sync ---- echo x > /sys/block/nvmeon1/queue/iosched/timeout_sync

fifo_expire_async
-----------------
echo 800 > /sys/block/nvme0n1/queue/iosched/fifo_expire_async
Этот параметр используется для установки времени ожидания асинхронных запросов. Значение по умолчанию
равно 248 мс.

fifo_expire_sync
----------------
echo 10 > /sys/block/nvme0n1/queue/iosched/fifo_expire_sync
Этот параметр используется для установки времени ожидания синхронных запросов. По умолчанию
значение этого параметра равно 124 мс. В случае предпочтения синхронных запросов асинхронным
это значение следует уменьшить относительно fifo_expire_async.

low_latency
-----------
echo 0 > /sys/block/nvme0n1/queue/iosched/low_latency

Этот параметр используется для включения / отключения режима низкой задержки BFQ. По умолчанию режим низкой задержки включен. Если включено, интерактивное и программное обеспечение
приложения реального времени имеют привилегированные возможности и имеют меньшую задержку,
как более подробно объясняется в описании того, как работает BFQ.

ОТКЛЮЧИТЕ этот режим, если вам нужен полный контроль над пропускной способностью
распределение. Фактически, если он включен, то BFQ автоматически
увеличивает долю полосы пропускания привилегированных приложений, как основное
средство гарантировать им меньшую задержку.

Кроме того, как уже подчеркивалось в начале этого документа,
ОТКЛЮЧИТЕ этот режим, если вашей единственной целью является достижение высокой пропускной способности.
Фактически, предоставление привилегий ввода-вывода некоторому приложению по сравнению с остальными может
привести к снижению пропускной способности. Для достижения максимально возможной пропускной способности
на устройстве без вращения также может потребоваться установка значения slice_idle равным 0
(ценой отказа от какой-либо надежной гарантии честности и низкой

max_budget
----------
echo 80 > /sys/block/nvme0n1/queue/iosched/max_budget

Максимальный объем обслуживания, измеряемый в секторах, который может быть предоставлен
очереди BFQ после ее запуска в эксплуатацию (конечно, в пределах
указанного выше тайм-аута). Согласно тому, что сказано в описании
алгоритма, большие значения увеличивают пропускную способность пропорционально
проценту выданных последовательных запросов ввода-вывода. Цена больших значений
заключается в том, что они увеличивают детализацию краткосрочной полосы пропускания
и гарантируют задержки.

Значение по умолчанию равно 0, что позволяет выполнять автоматическую настройку: BFQ устанавливает max_budget
на максимальное количество секторов, которые могут быть обслужены в течение
timeout_sync, в соответствии с расчетной пиковой скоростью.

Для определенных устройств некоторые пользователи иногда сообщали, что
достигли более высокой пропускной способности, установив max_budget явно, т.Е.
установив max_budget на большее значение, чем 0. В частности, они
установили max_budget на более высокие значения, чем те, которые были бы установлены BFQ
это с автоматической настройкой. Альтернативный способ достижения этой цели -
просто увеличьте значение timeout_sync, оставив max_budget равно 0.

slice_idle
----------

Этот параметр указывает, как долго BFQ должен простаивать для следующего ввода-вывода
запрос, когда определенные очереди синхронизации BFQ становятся пустыми. По умолчанию
slice_idle - ненулевое значение. Холостой ход преследует двойную цель: повысить
пропускную способность и убедиться, что желаемое распределение пропускной способности
соблюдается (см. Описание того, как работает BFQ, и, при необходимости, упомянутые там
документы).

Что касается пропускной способности, то холостой ход может быть очень полезен на носителях с высоким уровнем поиска
как одношпиндельные диски SATA / SAS, где мы можем сократить общее
количество запросов и увидеть улучшенную пропускную способность.

Установив значение slice_idle равным 0, вы устраните все простои в очередях и one
вы увидите общее улучшение пропускной способности на более быстрых устройствах хранения данных
например, на нескольких дисках SATA / SAS в конфигурации аппаратного RAID, а также
как хранилище на базе flash с внутренней очередью команд (и
параллелизмом).

Таким образом, в зависимости от хранилища и рабочей нагрузки, может быть полезно установить
slice_idle=0. В общем случае для дисков SATA / SAS и программного RAID
для дисков SATA / SAS включение slice_idle должно быть полезным. Для любых
конфигураций, в которых за одним LUN установлено несколько шпинделей
(Аппаратный RAID-контроллер на базе хоста или для массивов хранения данных), или с
быстрым хранилищем на основе флэш-памяти, установка slice_idle = 0 может в конечном итоге повысить
пропускную способность и приемлемые задержки.

slice_idle_us
-------------

Управляет тем же параметром настройки, что и slice_idle, но в микросекундах.
Для настройки режима холостого хода можно использовать любой настраиваемый параметр. После этого
другой настраиваемый параметр будет отражать вновь установленное значение в sysfs.

timeout_sync
------------

Максимальное время, которое устройство может уделить задаче (очереди) один раз
она была выбрана для обслуживания. На устройствах с дорогостоящими запросами
увеличение этого времени обычно увеличивает максимальную пропускную способность. На
с другой стороны, увеличение этого времени увеличивает степень детализации
краткосрочные гарантии пропускной способности и задержки, особенно если
следующий параметр равен нулю.
